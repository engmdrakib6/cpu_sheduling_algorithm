#include<stdio.h>
#include<stdlib.h>

struct process
{
    int pid;
    int burst_time;
    int waiting_time;
    int turn_around_time;
    int remaining_time;
};

int main()
{
    int n, i, j;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    struct process p[n];
    for(i=0; i<n; i++)
    {
        p[i].pid = i+1;
        printf("Enter the burst time for process %d: ", p[i].pid);
        scanf("%d", &p[i].burst_time);
        p[i].remaining_time = p[i].burst_time;
    }

    int time_quantum;
    printf("Enter the time quantum: ");
    scanf("%d", &time_quantum);

    int time = 0;
    while(1)
    {
        int done = 1;
        for(i=0; i<n; i++)
        {
            if(p[i].remaining_time > 0)
            {
                done = 0;
                if(p[i].remaining_time > time_quantum)
                {
                    time += time_quantum;
                    p[i].remaining_time -= time_quantum;
                }
                else
                {
                    time = time + p[i].remaining_time;
                    p[i].waiting_time = time - p[i].burst_time;
                    p[i].remaining_time = 0;
                }
            }
        }
        if(done == 1)
            break;
    }

    printf("\nPID\tBurst Time\tWaiting Time\tTurn-Around Time\n");
    for(i=0; i<n; i++)
    {
        p[i].turn_around_time = p[i].burst_time + p[i].waiting_time;
        printf("%d\t\t%d\t\t%d\t\t%d\n", p[i].pid, p[i].burst_time, p[i].waiting_time, p[i].turn_around_time);
    }
    return 0;
}
